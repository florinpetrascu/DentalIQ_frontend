{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\40753\\\\source\\\\Facultate\\\\Semestrul_5\\\\ProiectareaProdInovative\\\\DentalIQ_frontend\\\\src\\\\components\\\\patient\\\\Patient.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useLocation, Route, Routes, useNavigate } from 'react-router-dom';\nimport \"./Patients.css\";\nimport Tooth from \"./Tooth\";\nimport \"./Patient.css\";\nimport teethChart from '../../icons/teeth_chart.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Patient = () => {\n  _s();\n  var _location$state;\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const location = useLocation();\n  const patient = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.patient;\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [selectedTooth, setSelectedTooth] = useState(null); // Dintele selectat\n  const [teeth, setTeeth] = useState([]);\n  useEffect(() => {\n    if (patient) {\n      setFirstName(patient.firstName);\n      setLastName(patient.lastName);\n      setPhoneNumber(patient.phoneNumber);\n      setTeeth(patient.teeths);\n    } else {\n      // Fetch patient data from API if not passed through state\n      fetch(`/api/patients/${id}`).then(res => res.json()).then(data => {\n        setFirstName(data.firstName);\n        setLastName(data.lastName);\n        setPhoneNumber(data.phoneNumber);\n      }).catch(error => console.error(\"Error fetching patient:\", error));\n    }\n  }, [patient, id]);\n  const handleSubmit = () => {\n    console.log(`Teeth clicked`);\n    navigate(`tooth`);\n  };\n  // Funcția pentru a seta dintele selectat\n  const handleToothClick = tooth => {\n    console.log(`Teeth clicked`);\n    console.log(tooth);\n    setSelectedTooth(tooth);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart_img\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(Patient, \"YE1JshHH9biY5y5OyXjiOcIN/Y8=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = Patient;\nexport default Patient;\nvar _c;\n$RefreshReg$(_c, \"Patient\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useLocation","Route","Routes","useNavigate","Tooth","teethChart","jsxDEV","_jsxDEV","Patient","_s","_location$state","navigate","id","location","patient","state","firstName","setFirstName","lastName","setLastName","phoneNumber","setPhoneNumber","selectedTooth","setSelectedTooth","teeth","setTeeth","teeths","fetch","then","res","json","data","catch","error","console","handleSubmit","log","handleToothClick","tooth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/40753/source/Facultate/Semestrul_5/ProiectareaProdInovative/DentalIQ_frontend/src/components/patient/Patient.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {useParams, useLocation, Route, Routes, useNavigate} from 'react-router-dom';\r\nimport \"./Patients.css\";\r\nimport Tooth from \"./Tooth\";\r\nimport \"./Patient.css\" ;\r\nimport teethChart from '../../icons/teeth_chart.png'\r\n\r\nconst Patient = () => {\r\n    const navigate = useNavigate();\r\n    const { id } = useParams();\r\n    const location = useLocation();\r\n    const patient = location.state?.patient;\r\n\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n    const [selectedTooth, setSelectedTooth] = useState(null); // Dintele selectat\r\n    const [teeth, setTeeth] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (patient) {\r\n            setFirstName(patient.firstName);\r\n            setLastName(patient.lastName);\r\n            setPhoneNumber(patient.phoneNumber);\r\n            setTeeth(patient.teeths);\r\n        } else {\r\n            // Fetch patient data from API if not passed through state\r\n            fetch(`/api/patients/${id}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setFirstName(data.firstName);\r\n                    setLastName(data.lastName);\r\n                    setPhoneNumber(data.phoneNumber);\r\n                })\r\n                .catch(error => console.error(\"Error fetching patient:\", error));\r\n        }\r\n    }, [patient, id]);\r\n\r\n    const handleSubmit= () => {\r\n        console.log(`Teeth clicked`);\r\n        navigate(`tooth`);\r\n    };\r\n    // Funcția pentru a seta dintele selectat\r\n    const handleToothClick = (tooth) => {\r\n        console.log(`Teeth clicked`);\r\n        console.log(tooth);\r\n        setSelectedTooth(tooth);\r\n    };\r\n\r\n    return (\r\n        <div className='main-content'>\r\n            <div className='left-content'>\r\n\r\n                    <div className=\"chart_img\">\r\n\r\n                        {/*<button className=\"sidebar-button\">*/}\r\n\r\n                        {/*    Programări*/}\r\n                        {/*</button>*/}\r\n\r\n                        {/*<ul>*/}\r\n                        {/*    {teeth.map((tooth) => (*/}\r\n                        {/*        <li*/}\r\n                        {/*            key={tooth.id}*/}\r\n                        {/*            onClick={() => handleToothClick(tooth)} // Setăm dintele selectat*/}\r\n                        {/*            // style={{*/}\r\n                        {/*            //     cursor: \"pointer\",*/}\r\n                        {/*            //     color: selectedTooth?.id === tooth.id ? \"blue\" : \"black\",*/}\r\n                        {/*            // }}*/}\r\n                        {/*        >*/}\r\n                        {/*            Dintele {tooth.name}*/}\r\n                        {/*        </li>*/}\r\n                        {/*    ))}*/}\r\n                        {/*</ul>*/}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n            {/*/!* Partea dreaptă - Detalii dinte *!/*/}\r\n            {/*<div className=\"right-content\">*/}\r\n            {/*    {selectedTooth ? (*/}\r\n            {/*        <Tooth tooth={selectedTooth} />*/}\r\n            {/*    ) : (*/}\r\n            {/*        <p>Selectați un dinte pentru a vedea detalii.</p>*/}\r\n            {/*    )}*/}\r\n            {/*</div>*/}\r\n\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Patient;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}