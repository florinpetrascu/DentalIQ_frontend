{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\40753\\\\source\\\\Facultate\\\\Semestrul_5\\\\ProiectareaProdInovative\\\\DentalIQ_frontend\\\\src\\\\components\\\\patient\\\\Patient.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams, useLocation } from 'react-router-dom';\nimport \"./Patients.css\";\nimport Tooth from \"./Tooth\";\nimport \"./Patient.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Patient = () => {\n  _s();\n  var _location$state;\n  const {\n    id\n  } = useParams();\n  const location = useLocation();\n  let patient = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.patient;\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [selectedTooth, setSelectedTooth] = useState(null); // Dintele selectat\n  const [teeth, setTeeth] = useState([]);\n  const [imageFile, setImageFile] = useState(null); // Fișierul de imagine\n  const [previewImage, setPreviewImage] = useState(null); // Imaginea pentru previzualizare\n  const [patientHere, setPatientHere] = useState(patient);\n  const [hoveredTooth, setHoveredTooth] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // eslint-disable-next-line\n  useEffect(() => {\n    console.log(\"useEffect\");\n    const fetchPatient = async () => {\n      try {\n        // Trimite requestul către API-ul de radiografii\n        const response = await axios.get(`/api/patients/${id}`);\n        if (response.data) {\n          setPatientHere(response.data); // Setează URL-ul radiografiei pentru previzualizare\n          setFirstName(response.data.first_name);\n          setLastName(response.data.last_name);\n          setPhoneNumber(response.data.phone_number);\n          setTeeth(response.data.teeths);\n        } else {\n          console.error(\"Nu a fost găsit acest pacient.\");\n        }\n      } catch (error) {\n        console.error(\"Eroare la aducerea pacientului:\", error);\n      }\n    };\n    if (patientHere) {\n      setFirstName(patientHere.first_name);\n      setLastName(patientHere.last_name);\n      setPhoneNumber(patientHere.phone_number);\n      if (patientHere.teeths) {\n        setTeeth(patientHere.teeths);\n      } else {}\n      // Adăugăm codul pentru a obține radiografia\n      const fetchRadiography = async () => {\n        try {\n          // Trimite requestul către API-ul de radiografii\n          const response = await axios.get(`/api/radiographies/${id}`);\n          if (response.data && response.data.url) {\n            setPreviewImage(response.data.url); // Setează URL-ul radiografiei pentru previzualizare\n          } else {\n            console.error(\"Radiografia nu a fost găsită pentru acest pacient.\");\n          }\n        } catch (error) {\n          console.error(\"Eroare la aducerea radiografiei:\", error);\n        }\n      };\n      fetchRadiography();\n    } else {\n      // Fetch patient data from API if not passed through state\n      fetch(`/api/patients/${id}`).then(res => res.json()).then(data => {\n        console.log(\"Raspuns primit \", data);\n        setFirstName(data.first_name);\n        setLastName(data.last_name);\n        setPhoneNumber(data.phone_number);\n        setTeeth(data.teeths);\n      }).catch(error => console.error(\"Error fetching patient:\", error));\n    }\n  }, [patientHere, id]);\n  const handleImageUpload = event => {\n    const file = event.target.files[0];\n    setImageFile(file);\n\n    // Creează o previzualizare locală a imaginii\n    const reader = new FileReader();\n    reader.onload = e => setPreviewImage(e.target.result);\n    reader.readAsDataURL(file);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!imageFile) {\n      alert(\"Please upload an image before submitting.\");\n      return;\n    }\n    setIsSubmitting(true); // Dezactivează formularul și afișează spinner-ul\n    // Encodează imaginea în Base64\n    const reader = new FileReader();\n    reader.onload = async () => {\n      const imageBase64 = reader.result.split(',')[1]; // Extrage doar partea Base64\n\n      const payload = {\n        patient_data: {\n          id,\n          firstName,\n          lastName,\n          phoneNumber,\n          teeth\n        },\n        image: imageBase64\n      };\n      try {\n        const response = await fetch(\"/api/ai/analyse\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(payload)\n        });\n        const data = await response.json();\n        console.log(\"Server response:\", data);\n        setPatientHere(data);\n      } catch (error) {\n        console.error(\"Error uploading patient:\", error);\n      } finally {\n        setIsSubmitting(false);\n      }\n    };\n    reader.readAsDataURL(imageFile);\n  };\n  const handleToothClick = tooth => {\n    console.log(`Teeth clicked`);\n    console.log(tooth);\n    setSelectedTooth(tooth);\n  };\n  const handleToothHover = toothName => {\n    console.log(`Teeth hover start`);\n    //console.log(toothName);\n    setHoveredTooth(toothName); // Setează dintele curent\n  };\n  const handleToothHoverEnd = () => {\n    console.log(`Teeth hover end`);\n    //console.log(hoveredTooth);\n    setHoveredTooth(null); // Resetează dintele curent\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `main-content ${isSubmitting ? \"disabled\" : \"\"}`,\n    children: [isSubmitting && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart_img\",\n        children: Array.from({\n          length: 32\n        }, (_, index) => {\n          const toothNumber = index + 1;\n          const tooth = teeth.find(t => t.name == toothNumber);\n          const isExisting = teeth.some(tooth => tooth.name == toothNumber); // Verifică dacă toothNumber este egal cu tooth.name\n\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `teeth_buton  ${isExisting ? \"isExisting\" : \"isMissing\"} teeth_buton${toothNumber}`,\n            onClick: () => handleToothClick(tooth),\n            onMouseEnter: () => handleToothHover(toothNumber.toString()),\n            onMouseLeave: handleToothHoverEnd,\n            disabled: isSubmitting,\n            children: `${toothNumber}`\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: previewImage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-preview-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: previewImage,\n            alt: \"Preview\",\n            className: \"image-preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this), teeth.map((tooth, index) => {\n            const points = JSON.parse(tooth.polygon).map(([x, y]) => `${x / 10}% ${y / 10}%`) // Normalizează punctele pentru proporții relative\n            .join(\", \");\n            // const points = \"0% 0%, 100% 0%, 50% 100% ,30% 70% ,50% 20%\";\n            console.log(\"points\");\n            //console.log(points)\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              //className={\"tooth-polygon\"}\n              //className = {\"tooth-polygon visible\"}\n              className: `tooth-polygon ${hoveredTooth == tooth.name ? \"visible\" : \"\"}`,\n              style: {\n                position: \"absolute\",\n                // Permite poziționarea relativă față de imagine\n                top: \"60px\",\n                // Ajustează poziția în funcție de imaginea ta\n                left: \"35px\",\n                // Ajustează poziția în funcție de imaginea ta\n                width: \"1650px\",\n                height: \"1400px\",\n                // backgroundColor: \"green\",  // Fundal pentru a face poligonul vizibil\n                clipPath: `polygon(${points})`,\n                // Poligon triunghiular\n                zIndex: 10 // Asigură-te că poligonul apare deasupra imaginii\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"patient-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-bar\",\n          type: \"text\",\n          value: firstName,\n          onChange: e => setFirstName(e.target.value),\n          placeholder: \"First Name\",\n          required: true,\n          disabled: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-bar\",\n          type: \"text\",\n          value: lastName,\n          onChange: e => setLastName(e.target.value),\n          placeholder: \"Last Name\",\n          required: true,\n          disabled: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-bar\",\n          type: \"text\",\n          value: phoneNumber,\n          onChange: e => setPhoneNumber(e.target.value),\n          placeholder: \"Phone Number\",\n          required: true,\n          disabled: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"file-upload\",\n          type: \"file\",\n          accept: \"image/*\",\n          className: \"hidden-input\",\n          onChange: handleImageUpload,\n          disabled: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          type: \"upload\",\n          htmlFor: \"file-upload\",\n          className: \"submit-button upload\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text_upload\",\n            children: \"X-ray Upload \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button send\",\n          onClick: handleSubmit,\n          disabled: isSubmitting,\n          children: isSubmitting ? \"Loading...\" : \"AI Scan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), selectedTooth ? /*#__PURE__*/_jsxDEV(Tooth, {\n        tooth: selectedTooth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"tratament-item\",\n        children: \"Select a tooth to see details.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n_s(Patient, \"XDHyDtdCjQjObqbaze/o8oET1Wk=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = Patient;\nexport default Patient;\nvar _c;\n$RefreshReg$(_c, \"Patient\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","useLocation","Tooth","jsxDEV","_jsxDEV","Patient","_s","_location$state","id","location","patient","state","firstName","setFirstName","lastName","setLastName","phoneNumber","setPhoneNumber","selectedTooth","setSelectedTooth","teeth","setTeeth","imageFile","setImageFile","previewImage","setPreviewImage","patientHere","setPatientHere","hoveredTooth","setHoveredTooth","isSubmitting","setIsSubmitting","console","log","fetchPatient","response","get","data","first_name","last_name","phone_number","teeths","error","fetchRadiography","url","fetch","then","res","json","catch","handleImageUpload","event","file","target","files","reader","FileReader","onload","e","result","readAsDataURL","handleSubmit","preventDefault","alert","imageBase64","split","payload","patient_data","image","method","headers","body","JSON","stringify","handleToothClick","tooth","handleToothHover","toothName","handleToothHoverEnd","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","from","length","_","index","toothNumber","find","t","name","isExisting","some","onClick","onMouseEnter","toString","onMouseLeave","disabled","src","alt","map","points","parse","polygon","x","y","join","style","position","top","left","width","height","clipPath","zIndex","onSubmit","type","value","onChange","placeholder","required","accept","htmlFor","_c","$RefreshReg$"],"sources":["C:/Users/40753/source/Facultate/Semestrul_5/ProiectareaProdInovative/DentalIQ_frontend/src/components/patient/Patient.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {useParams, useLocation} from 'react-router-dom';\r\nimport \"./Patients.css\";\r\nimport Tooth from \"./Tooth\";\r\nimport \"./Patient.css\" ;\r\n\r\n\r\nconst Patient = () => {\r\n\r\n    const { id } = useParams();\r\n    const location = useLocation();\r\n    let patient = location.state?.patient;\r\n\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n    const [selectedTooth, setSelectedTooth] = useState(null); // Dintele selectat\r\n    const [teeth, setTeeth] = useState([]);\r\n    const [imageFile, setImageFile] = useState(null); // Fișierul de imagine\r\n    const [previewImage, setPreviewImage] = useState(null); // Imaginea pentru previzualizare\r\n    const [patientHere,setPatientHere] = useState(patient)\r\n    const [hoveredTooth, setHoveredTooth] = useState(null);\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    // eslint-disable-next-line\r\n    useEffect(() => {\r\n        console.log(\"useEffect\");\r\n\r\n        const fetchPatient = async () => {\r\n            try {\r\n                // Trimite requestul către API-ul de radiografii\r\n                const response = await axios.get(`/api/patients/${id}`);\r\n\r\n                if (response.data) {\r\n                    setPatientHere(response.data); // Setează URL-ul radiografiei pentru previzualizare\r\n                    setFirstName(response.data.first_name);\r\n                    setLastName(response.data.last_name);\r\n                    setPhoneNumber(response.data.phone_number);\r\n                    setTeeth(response.data.teeths)\r\n                } else {\r\n                    console.error(\"Nu a fost găsit acest pacient.\");\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Eroare la aducerea pacientului:\", error);\r\n            }\r\n        };\r\n\r\n        if (patientHere) {\r\n            setFirstName(patientHere.first_name);\r\n            setLastName(patientHere.last_name);\r\n            setPhoneNumber(patientHere.phone_number);\r\n\r\n            if (patientHere.teeths) {\r\n                setTeeth(patientHere.teeths);\r\n            }\r\n            else{\r\n\r\n            }\r\n            // Adăugăm codul pentru a obține radiografia\r\n            const fetchRadiography = async () => {\r\n                try {\r\n                    // Trimite requestul către API-ul de radiografii\r\n                    const response = await axios.get(`/api/radiographies/${id}`);\r\n\r\n                    if (response.data && response.data.url) {\r\n                        setPreviewImage(response.data.url); // Setează URL-ul radiografiei pentru previzualizare\r\n                    } else {\r\n                        console.error(\"Radiografia nu a fost găsită pentru acest pacient.\");\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Eroare la aducerea radiografiei:\", error);\r\n                }\r\n            };\r\n\r\n            fetchRadiography();\r\n\r\n        }\r\n        else {\r\n\r\n            // Fetch patient data from API if not passed through state\r\n            fetch(`/api/patients/${id}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    console.log(\"Raspuns primit \",data)\r\n                    setFirstName(data.first_name);\r\n                    setLastName(data.last_name);\r\n                    setPhoneNumber(data.phone_number);\r\n                    setTeeth(data.teeths)\r\n                })\r\n                .catch(error => console.error(\"Error fetching patient:\", error));\r\n        }\r\n    }, [patientHere, id]);\r\n\r\n    const handleImageUpload = (event) => {\r\n        const file = event.target.files[0];\r\n        setImageFile(file);\r\n\r\n        // Creează o previzualizare locală a imaginii\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => setPreviewImage(e.target.result);\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!imageFile) {\r\n            alert(\"Please upload an image before submitting.\");\r\n            return;\r\n        }\r\n        setIsSubmitting(true); // Dezactivează formularul și afișează spinner-ul\r\n        // Encodează imaginea în Base64\r\n        const reader = new FileReader();\r\n        reader.onload = async () => {\r\n            const imageBase64 = reader.result.split(',')[1]; // Extrage doar partea Base64\r\n\r\n            const payload = {\r\n                patient_data: { id,firstName, lastName, phoneNumber, teeth },\r\n                image: imageBase64\r\n            };\r\n\r\n            try {\r\n                const response = await fetch(\"/api/ai/analyse\", {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify(payload)\r\n                });\r\n\r\n\r\n                const data = await response.json();\r\n                console.log(\"Server response:\", data);\r\n\r\n                setPatientHere(data);\r\n            } catch (error) {\r\n                console.error(\"Error uploading patient:\", error);\r\n            }\r\n            finally {\r\n                setIsSubmitting(false);\r\n            }\r\n        };\r\n        reader.readAsDataURL(imageFile);\r\n    };\r\n\r\n    const handleToothClick = (tooth) => {\r\n        console.log(`Teeth clicked`);\r\n\r\n        console.log(tooth);\r\n\r\n        setSelectedTooth(tooth);\r\n\r\n    };\r\n\r\n    const handleToothHover = (toothName) => {\r\n        console.log(`Teeth hover start`);\r\n        //console.log(toothName);\r\n        setHoveredTooth(toothName); // Setează dintele curent\r\n    };\r\n\r\n    const handleToothHoverEnd = () => {\r\n        console.log(`Teeth hover end`);\r\n        //console.log(hoveredTooth);\r\n        setHoveredTooth(null); // Resetează dintele curent\r\n    };\r\n\r\n    return (\r\n        <div className={`main-content ${isSubmitting ? \"disabled\" : \"\"}`}>\r\n            {isSubmitting && (\r\n                <div className=\"spinner-container\">\r\n                    <div className=\"spinner\"></div>\r\n                </div>\r\n            )}\r\n            <div className='left-content'>\r\n\r\n                    <div className=\"chart_img\">\r\n\r\n\r\n\r\n                        {/* Crearea butoanelor din 1 până la 32 */}\r\n                        {Array.from({ length: 32 }, (_, index) => {\r\n                            const toothNumber = index + 1;\r\n                            const tooth = teeth.find((t) => t.name == toothNumber);\r\n                            const isExisting = teeth.some((tooth) => tooth.name == toothNumber); // Verifică dacă toothNumber este egal cu tooth.name\r\n\r\n                            return (\r\n                                <button\r\n                                    key={index}\r\n                                    className={`teeth_buton  ${isExisting ? \"isExisting\" : \"isMissing\"} teeth_buton${toothNumber}`}\r\n                                    onClick={() => handleToothClick(tooth)}\r\n                                    onMouseEnter={() => handleToothHover(toothNumber.toString())}\r\n                                    onMouseLeave={handleToothHoverEnd}\r\n                                    disabled={isSubmitting}\r\n                                >\r\n                                 {`${toothNumber}`}\r\n                                </button>\r\n                            );\r\n                        })}\r\n\r\n                    </div>\r\n\r\n                {/* Imaginea panoramică */}\r\n                <div >\r\n                    {previewImage && (\r\n                        <div  className=\"image-preview-wrapper\">\r\n                            <img src={previewImage} alt=\"Preview\" className=\"image-preview\" />\r\n\r\n                            {/* Poligoane pentru fiecare dinte */}\r\n                            {teeth.map((tooth, index) => {\r\n\r\n                                const points = JSON.parse(tooth.polygon)\r\n                                    .map(([x, y]) => `${x / 10}% ${y / 10}%`) // Normalizează punctele pentru proporții relative\r\n                                    .join(\", \");\r\n                               // const points = \"0% 0%, 100% 0%, 50% 100% ,30% 70% ,50% 20%\";\r\n                                console.log(\"points\")\r\n                                //console.log(points)\r\n                                return (\r\n                                    <div\r\n                                        key={index}\r\n                                        //className={\"tooth-polygon\"}\r\n                                        //className = {\"tooth-polygon visible\"}\r\n                                        className={`tooth-polygon ${hoveredTooth == tooth.name ? \"visible\" : \"\"}`}\r\n                                        style={{\r\n                                            position: \"absolute\",  // Permite poziționarea relativă față de imagine\r\n                                            top: \"60px\",  // Ajustează poziția în funcție de imaginea ta\r\n                                            left: \"35px\",  // Ajustează poziția în funcție de imaginea ta\r\n                                            width: \"1650px\",\r\n                                            height: \"1400px\",\r\n                                            // backgroundColor: \"green\",  // Fundal pentru a face poligonul vizibil\r\n                                            clipPath: `polygon(${points})`,  // Poligon triunghiular\r\n                                            zIndex: 10  // Asigură-te că poligonul apare deasupra imaginii\r\n                                        }}\r\n                                    ></div>\r\n                                );\r\n                            })}\r\n\r\n                                   {/*<div*/}\r\n\r\n                                   {/*     className={`cover-image ${hoveredTooth != null ? \"visible\" : \"\"}` }*/}\r\n                                   {/*      style={{*/}\r\n                                   {/*         position: \"absolute\",*/}\r\n                                   {/*         zIndex: 10*/}\r\n                                   {/*     }}*/}\r\n                                   {/*></div>*/}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                {/*<div>*/}\r\n                {/*    {previewImage && <img src={previewImage} alt=\"Preview\" className=\"image-preview\" />}*/}\r\n                {/*</div>*/}\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n            {/* Partea dreaptă - Detalii dinte */}\r\n            <div className=\"right-content\">\r\n                <form onSubmit={handleSubmit} className=\"patient-form\">\r\n\r\n                        <input\r\n                            className=\"input-bar\"\r\n                            type=\"text\"\r\n                            value={firstName}\r\n                            onChange={(e) => setFirstName(e.target.value)}\r\n                            placeholder=\"First Name\"\r\n                            required\r\n                            disabled={isSubmitting}\r\n                        />\r\n                        <input\r\n                            className=\"input-bar\"\r\n                            type=\"text\"\r\n                            value={lastName}\r\n                            onChange={(e) => setLastName(e.target.value)}\r\n                            placeholder=\"Last Name\"\r\n                            required\r\n                            disabled={isSubmitting}\r\n                        />\r\n                        <input\r\n                            className=\"input-bar\"\r\n                            type=\"text\"\r\n                            value={phoneNumber}\r\n                            onChange={(e) => setPhoneNumber(e.target.value)}\r\n                            placeholder=\"Phone Number\"\r\n                            required\r\n                            disabled={isSubmitting}\r\n                        />\r\n\r\n\r\n                    <input id=\"file-upload\" type=\"file\" accept=\"image/*\"  className=\"hidden-input\" onChange={handleImageUpload} disabled={isSubmitting}/>\r\n\r\n                    <label type=\"upload\" htmlFor=\"file-upload\" className=\"submit-button upload\">\r\n                        <p className=\"text_upload\">X-ray Upload </p>\r\n                    </label>\r\n\r\n                    <button type=\"submit\" className=\"submit-button send\" onClick={handleSubmit} disabled={isSubmitting}>\r\n                        {isSubmitting ? \"Loading...\" : \"AI Scan\"}\r\n                    </button>\r\n\r\n                </form>\r\n\r\n\r\n\r\n\r\n                {selectedTooth ? (\r\n                    <Tooth tooth={selectedTooth} />\r\n                ) : (\r\n                    <p className=\"tratament-item\">Select a tooth to see details.</p>\r\n                )}\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Patient;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}